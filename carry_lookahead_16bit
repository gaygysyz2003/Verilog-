module carry_lookahead_16bit(Cout, S, X, Y, Cin);

    // Input and output ports for the 16-bit carry-lookahead adder
    output wire Cout;             // Final carry-out for the 16-bit adder
    output wire [15:0] S;         // 16-bit sum output
    input wire [15:0] X, Y;       // 16-bit input operands
    input wire Cin;               // Initial carry-in

    // Internal signals
    wire [16:0] C;                // Carry signals across all bits (17 bits including initial and final carry)
    wire [15:0] G, P;             // Generate and propagate signals for each bit
    wire [3:0] P_star, G_star;    // Block-level generate and propagate signals for each 4-bit section

    // Set initial carry-in and connect final carry-out
    assign C[0] = Cin;
    assign Cout = C[16];

    // Generate propagate and generate signals for each bit
    generate_propagate_unit #2 GPU (G, P, X, Y);

    // Instantiate 4-bit block carry-lookahead units
    block_carry_lookahead_unit #2 BCLAU0 (.G_star(G_star[0]), .P_star(P_star[0]), .C({C[3:1]}), .G(G[3:0]), .P(P[3:0]), .C0(C[0]));
    block_carry_lookahead_unit #2 BCLAU1 (.G_star(G_star[1]), .P_star(P_star[1]), .C({C[7:5]}), .G(G[7:4]), .P(P[7:4]), .C0(C[4]));
    block_carry_lookahead_unit #2 BCLAU2 (.G_star(G_star[2]), .P_star(P_star[2]), .C({C[11:9]}), .G(G[11:8]), .P(P[11:8]), .C0(C[8]));
    block_carry_lookahead_unit #2 BCLAU3 (.G_star(G_star[3]), .P_star(P_star[3]), .C({C[15:13]}), .G(G[15:12]), .P(P[15:12]), .C0(C[12]));

    // Top-level carry-lookahead unit to manage carries between 4-bit blocks
    carry_lookahead_unit #2 CLU0 (.C({C[16], C[12], C[8], C[4]}), .G(G_star), .P(P_star), .C0(C[0]));

    // Summation unit to compute the final sum output
    summation_unit #2 SU (.S(S[15:0]), .P(P[15:0]), .C(C[15:0]));

endmodule
